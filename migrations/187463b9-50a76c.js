
module.exports.id = '187463b9.50a76c';

const _ = require('lodash'),
  config = require('../config');

/**
 * @description flow 187463b9.50a76c update
 * @param done
 */
   

module.exports.up = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.update({"path":"187463b9.50a76c","type":"flows"}, {
    $set: {"path":"187463b9.50a76c","body":[{"id":"79640639.9f6918","type":"amqp in","z":"187463b9.50a76c","name":"lock event","topic":"${config.main.rabbit.serviceName}_chrono_sc.lock","configname":"","iotype":"3","ioname":"events","noack":"0","durablequeue":"0","durableexchange":"0","server":"","servermode":"1","x":80,"y":300,"wires":[["22812a80.b669b6"]]},{"id":"6977c3e0.ae05dc","type":"async-function","z":"187463b9.50a76c","name":"open swap","func":"const Web3 = global.get('libs.web3');\nconst sidechainProvider = global.get('settings.sidechain.web3.provider');\nconst crypto = global.get('libs.crypto');\nconst symbol = global.get('settings.sidechain.web3.symbol');\nconst uniqid = global.get('libs.uniqid');\n\nconst sidechainProviderInstance = await sidechainProvider.getInstance();\n\nlet key = uniqid();\nlet swapId = uniqid();\n\nconst keyHash = crypto.createHash('sha256').update(msg.payload.key).digest('hex');\n\n\nconst platform = sidechainProviderInstance.contracts.ChronoBankPlatform;\nconst swapContract = sidechainProviderInstance.contracts.AtomicSwapERC20;\n\nawait platform.methods.reissueAsset(sidechainProviderInstance.web3.utils.asciiToHex(symbol), msg.value)\n    .send({from: sidechainProviderInstance.address, gas: 200000});\n\nconst tokenAddress = await platform.methods.proxies(sidechainProviderInstance.web3.utils.asciiToHex(symbol)).call();\nsidechainProviderInstance.contracts.ERC20Interface.options.address = tokenAddress;\n\n\nawait sidechainProviderInstance.contracts.ERC20Interface.methods.approve(swapContract.options.address, msg.value)\n    .send({from: sidechainProviderInstance.address, gas: 5700000});\n\nnode.warn([\n     msg.payload.swapId, \n    msg.value, \n    tokenAddress, \n    msg.address, \n    `0x${keyHash}`, \n    (new Date()).getTime()/1000 + 120\n    ])\n\nconst result = await swapContract.methods.open(\n    sidechainProviderInstance.web3.utils.asciiToHex(msg.payload.swapId), \n    msg.value, \n    tokenAddress, \n    msg.address, \n    `0x${keyHash}`, \n    sidechainProviderInstance.web3.utils.toHex(parseInt((new Date()).getTime()/1000 + 120)))\n    .send({from: sidechainProviderInstance.address, gas: 5700000});\n\nnode.warn(result);\n\nif(msg.amqpMessage)\n    msg.amqpMessage.ackMsg();\n\nmsg.payload = {\n    swapId: msg.payload.swapId\n};\n\n\nreturn msg; ","outputs":1,"noerr":7,"x":670,"y":300,"wires":[[]]},{"id":"def6fd01.5b8cc","type":"mongo","z":"187463b9.50a76c","model":"","request":"{}","options":"{}","name":"mongo","mode":"1","requestType":"1","dbAlias":"primary.mainnet","x":510,"y":300,"wires":[["6977c3e0.ae05dc"]]},{"id":"22812a80.b669b6","type":"function","z":"187463b9.50a76c","name":"prepare exchange","func":"const prefix = global.get('settings.main.mongo.collectionPrefix');\nconst uniqid = global.get('libs.uniqid');\nconst crypto = global.get('libs.crypto');\n\nlet key = uniqid();\nlet swapId = uniqid();\n\nconst swapIdHash = crypto.createHash('sha256').update(swapId)\n    .digest('hex');    \n\nmsg.payload = JSON.parse(msg.payload).payload;\n\nmsg.value = parseInt(msg.payload.amount);\nmsg.address = msg.payload.who.toLowerCase();\n\nmsg.payload = {\n    model: `${prefix}Exchange`, \n    request: {\n       key: key,\n       swapIdHash: swapIdHash,\n       address: msg.address,\n       swapId: swapId\n       }\n};\n\n\nreturn msg;","outputs":1,"noerr":0,"x":290,"y":300,"wires":[["def6fd01.5b8cc"]]},{"id":"5db14f2f.82d13","type":"http in","z":"187463b9.50a76c","name":"get swaps","url":"/mainnet/swaps/:address","method":"get","upload":false,"swaggerDoc":"","x":67.0173568725586,"y":397.0104064941406,"wires":[["fd1422b4.0c53d"]]},{"id":"fd1422b4.0c53d","type":"function","z":"187463b9.50a76c","name":"prepare request","func":"const prefix = global.get('settings.main.mongo.collectionPrefix');\nmsg.payload = {\n    model: `${prefix}Exchange`, \n    request: {\n       address: msg.req.params.address.toLowerCase()\n       }\n};\n\n\nreturn msg;","outputs":1,"noerr":0,"x":253.07642364501953,"y":398.00695610046387,"wires":[["158578b8.227e97"]]},{"id":"158578b8.227e97","type":"mongo","z":"187463b9.50a76c","model":"","request":"{}","options":"{}","name":"mongo","mode":"1","requestType":"0","dbAlias":"primary.mainnet","x":432.017333984375,"y":397.0104064941406,"wires":[["48606ffe.6fdfc"]]},{"id":"11a8169f.3c2c39","type":"http response","z":"187463b9.50a76c","name":"","statusCode":"","x":816.076416015625,"y":396.46533012390137,"wires":[]},{"id":"48606ffe.6fdfc","type":"function","z":"187463b9.50a76c","name":"format response","func":"\nmsg.payload = msg.payload.map(item=>({\n    swapId: item.swapId,\n    isActive: item.isActive,\n    created: item.created\n}));\n\nreturn msg;","outputs":1,"noerr":0,"x":607.0833282470703,"y":397.24306869506836,"wires":[["11a8169f.3c2c39"]]},{"id":"4f10423b.4eaa7c","type":"http in","z":"187463b9.50a76c","name":"get key","url":"/mainnet/swaps/obtain/:swap_id","method":"post","upload":false,"swaggerDoc":"","x":67,"y":495.0104064941406,"wires":[["e13f48c9.b78168"]]},{"id":"e13f48c9.b78168","type":"function","z":"187463b9.50a76c","name":"prepare request","func":"const prefix = global.get('settings.main.mongo.collectionPrefix');\n\nmsg.pubkey = msg.payload.pubkey;\n\nmsg.payload = {\n    model: `${prefix}Exchange`, \n    request: {\n       swapId: msg.req.params.swap_id\n       }\n};\n\n\nreturn msg;","outputs":1,"noerr":0,"x":240,"y":495,"wires":[["25d007bb.1f4b08"]]},{"id":"25d007bb.1f4b08","type":"mongo","z":"187463b9.50a76c","model":"","request":"{}","options":"{}","name":"mongo","mode":"1","requestType":"0","dbAlias":"primary.mainnet","x":415.017333984375,"y":495.0104064941406,"wires":[["d8dbcd84.5a57a"]]},{"id":"97141047.7ff0c","type":"http response","z":"187463b9.50a76c","name":"","statusCode":"","x":799.076416015625,"y":494.46533012390137,"wires":[]},{"id":"d8dbcd84.5a57a","type":"async-function","z":"187463b9.50a76c","name":"","func":"const EthCrypto = global.get('libs.EthCrypto');\n\n\nif(!msg.payload.length){\n    msg.payload = {msg: 'swap not found'};\n    return msg;\n}\n\nconst exchange = msg.payload[0];\n\nconst address = EthCrypto.publicKey.toAddress(msg.pubkey).toLowerCase();\n \n  \nif(exchange.address !== address){\n    msg.payload = {msg: 'wrong pubkey provided'};\n    return msg;\n}\n\n\nmsg.payload = await EthCrypto.encryptWithPublicKey(msg.pubkey, exchange.key);\n\n\nreturn msg;","outputs":1,"noerr":1,"x":600.2986679077148,"y":495.86811351776123,"wires":[["97141047.7ff0c"]]},{"id":"af9308b3.be05e8","type":"amqp in","z":"187463b9.50a76c","name":"close event","topic":"${config.main.rabbit.serviceName}_chrono_sc.close","configname":"","iotype":"3","ioname":"events","noack":"0","durablequeue":"0","durableexchange":"0","server":"","servermode":"1","x":90,"y":580,"wires":[[]]},{"id":"b4cf6344.864ea","type":"function","z":"187463b9.50a76c","name":"prepare exchange","func":"const prefix = global.get('settings.main.mongo.collectionPrefix');\nconst uniqid = global.get('libs.uniqid');\nconst crypto = global.get('libs.crypto');\n    \nif(msg.amqpMessage)\n    msg.amqpMessage.ackMsg();\n\n\nmsg.payload = JSON.parse(msg.payload).payload;\n\nmsg.payload = {\n    model: `${prefix}Exchange`, \n    request: [{\n       swap_id: swapId\n       }]\n};\n\n\nreturn msg;","outputs":1,"noerr":0,"x":310,"y":580,"wires":[[]]}]}
  }, {upsert: true}, done);
};

module.exports.down = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.remove({"path":"187463b9.50a76c","type":"flows"}, done);
};
